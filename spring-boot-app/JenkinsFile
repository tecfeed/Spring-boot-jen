pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
        stage('Checkout'){
           steps {
                git branch: 'sk-dev', changelog: false, poll: false, url: 'https://github.com/tecfeed/Spring-boot-jen'
           }
        }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package -Dmaven.test.skip=true'
      }
    }
     stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.31.200:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonar-token1', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "saurabh6870/ultimate-cicd-pipeline:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('dockerhub-token')
      }
      steps {
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "dockerhub-token") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Checkout K8S manifest SCM'){
            steps {
                git branch: 'main', changelog: false, credentialsId: 'github-creds', poll: false, url: 'https://github.com/tecfeed/Spring-boot-jen'
        
                
            }
        }
    // deploy file copies to main repo
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Spring-boot-jen"
            GIT_USER_NAME = "tecfeed"
        }
        steps {
            withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "saurabh6970@gmail.com"
                    git config user.name "tecfeed"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    
                    sed -i "s/\\(image: .*:\\).*$/\\1${BUILD_NUMBER}/" manifests/deployment.yml
                    git add manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}